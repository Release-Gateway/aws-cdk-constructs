    ## Config Rule Name : emr-kerberos-enabled
    ## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/EMR_KERBEROS_ENABLED.html"

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#   IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
#
# Description:
#   Checks the IAM policies that you create for Allow statements that grant permissions to all actions on all resources. 
#
# Reports on:
#   AWS::IAM::Policy
#
# Evaluates:
#   AWS CloudFormation
#
# Rule Parameters:
#   NA
#
# Scenarios:
# a) SKIP: when there are no IAM Policies present
# b) PASS: when all IAM Policies do not grant permissions to all actions on all resources
# c) FAIL: when any IAM Policies grant permissions to all actions on all resources
# d) SKIP: when metada has rule suppression for IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS

#
# Select all IAM Policy resources from incoming template (payload)
# 
let aws_iam_policies_no_statements_with_admin_access = Resources.*[ Type == 'AWS::IAM::Policy' 
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
]

rule IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS when %aws_iam_policies_no_statements_with_admin_access !empty {
  let violations = Resources.*[
    Type == 'AWS::IAM::Policy' 
    some Properties.PolicyDocument.Statement[*] {
      some Action[*] == "*"
      Effect == "Allow"
      Resource == "*"
    }
  ]
  %violations empty
	<<
    Guard Rule Set: nerc
    Controls: CIP-004-7-R6-Part 6.1    
    Violation: One or more IAM policies contain allow statements that grant permissions to all actions on all resources
    Fix: Remove policy statements that match {"Effect": "Allow", "Action": "*", "Resource": "*"}
  >>
} 



#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#   IAM_USER_NO_POLICIES_CHECK
#
# Description:
#   Checks that none of your IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles. 
#
# Reports on:
#   AWS::IAM::User
#
# Evaluates:
#   AWS CloudFormation
#
# Rule Parameters:
#   NA
#
# Scenarios:
# a) SKIP: when there are no IAM Users present
# b) PASS: when all IAM Users do not have policies attached
# c) FAIL: when any IAM User have policies attached
# d) SKIP: when metada has rule suppression for IAM_USER_NO_POLICIES_CHECK

#
# Select all IAM User resources from incoming template (payload)
# 
let aws_iam_users_no_policies = Resources.*[ Type == 'AWS::IAM::User'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "IAM_USER_NO_POLICIES_CHECK" 
]

rule IAM_USER_NO_POLICIES_CHECK when %aws_iam_users_no_policies !empty {
  %aws_iam_users_no_policies.Properties.Policies empty
  <<
    Guard Rule Set: nerc
    Controls: CIP-004-7-R6-Part 6.1    
  	Violation: Inline policies are not allowed on IAM Users. IAM users must inherit permissions from IAM groups or roles.
  	Fix: Remove the Policies list property from any IAM Users. 
  >>
}

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    S3_BUCKET_PUBLIC_READ_PROHIBITED
#
# Description:
#   Checks if your Amazon S3 buckets do not allow public read access. The rule checks the Block Public
#   Access settings, the bucket policy, and the bucket access control list (ACL).
#
# Reports on:
#    AWS::S3::Bucket
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no S3 resource present
# b) PASS: when all S3 resources Public Access Block Configuration element is present and properties are set to true
# c) FAIL: when all S3 resources do not have the Public Access Block Configuration element present or all properties set to true
# d) SKIP: when metadata includes the suppression for rule S3_BUCKET_PUBLIC_READ_PROHIBITED

#
# Select all S3 resources from incoming template (payload)
#
let s3_bucket_public_read_prohibited = Resources.*[ Type == 'AWS::S3::Bucket'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "S3_BUCKET_PUBLIC_READ_PROHIBITED"
]

rule S3_BUCKET_PUBLIC_READ_PROHIBITED when %s3_bucket_public_read_prohibited !empty {
  %s3_bucket_public_read_prohibited.Properties.PublicAccessBlockConfiguration exists
  %s3_bucket_public_read_prohibited.Properties.PublicAccessBlockConfiguration.BlockPublicAcls == true
  %s3_bucket_public_read_prohibited.Properties.PublicAccessBlockConfiguration.BlockPublicPolicy == true
  %s3_bucket_public_read_prohibited.Properties.PublicAccessBlockConfiguration.IgnorePublicAcls == true
  %s3_bucket_public_read_prohibited.Properties.PublicAccessBlockConfiguration.RestrictPublicBuckets == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-004-7-R6-Part 6.1    
    Violation: S3 Bucket Public Write Access controls need to be restricted.
    Fix: Set S3 Bucket PublicAccessBlockConfiguration properties for BlockPublicAcls, BlockPublicPolicy, IgnorePublicAcls, RestrictPublicBuckets parameters to true.
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    S3_BUCKET_PUBLIC_WRITE_PROHIBITED
#
# Description:
#   Checks if your Amazon S3 buckets do not allow public write access. The rule checks the Block Public
#   Access settings, the bucket policy, and the bucket access control list (ACL).
#
# Reports on:
#    AWS::S3::Bucket
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no S3 resource present
# b) PASS: when all S3 resources Public Access Block Configuration element is present and properties are set to true
# c) FAIL: when all S3 resources do not have the Public Access Block Configuration element present or all properties set to true
# d) SKIP: when metadata includes the suppression for rule S3_BUCKET_PUBLIC_WRITE_PROHIBITED

#
# Select all S3 resources from incoming template (payload)
#
let s3_buckets_public_write_prohibited = Resources.*[ Type == 'AWS::S3::Bucket'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
]

rule S3_BUCKET_PUBLIC_WRITE_PROHIBITED when %s3_buckets_public_write_prohibited !empty {
  %s3_buckets_public_write_prohibited.Properties.PublicAccessBlockConfiguration exists
  %s3_buckets_public_write_prohibited.Properties.PublicAccessBlockConfiguration.BlockPublicAcls == true
  %s3_buckets_public_write_prohibited.Properties.PublicAccessBlockConfiguration.BlockPublicPolicy == true
  %s3_buckets_public_write_prohibited.Properties.PublicAccessBlockConfiguration.IgnorePublicAcls == true
  %s3_buckets_public_write_prohibited.Properties.PublicAccessBlockConfiguration.RestrictPublicBuckets == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-004-7-R6-Part 6.1    
    Violation: S3 Bucket Public Write Access controls need to be restricted.
    Fix: Set S3 Bucket PublicAccessBlockConfiguration properties for BlockPublicAcls, BlockPublicPolicy, IgnorePublicAcls, RestrictPublicBuckets parameters to true.
  >>
}
## Config Rule Name : s3-bucket-policy-grantee-check
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy-grantee-check.html

# Rule Intent: Checks that the access granted by the Amazon S3 bucket is restricted by any of the AWS principals, federated users, service principals, IP addresses, or VPCs that you provide.

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    DMS_REPLICATION_NOT_PUBLIC
#
# Description:
#   Checks whether AWS Database Migration Service replication instances are not set to allow public.
#
# Reports on:
#    AWS::DMS::ReplicationInstance
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there is no DMS Replication Instance present
# b) FAIL: When DMS Replication Instance is present and PubliclyAccessible property is set to true
# c) PASS: When DMS Replication Instance is present and PubliclyAccessible property is set to false
# c) PASS: When DMS Replication Instance is present and PubliclyAccessible property is not set
# d) SKIP: when metada has rule suppression for DMS_REPLICATION_NOT_PUBLIC

#
# Select all Redshift cluster resources from incoming template
#

let dms_replication_instances = Resources.*[ Type == 'AWS::DMS::ReplicationInstance'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "DMS_REPLICATION_NOT_PUBLIC"
]

rule DMS_REPLICATION_NOT_PUBLIC when %dms_replication_instances !empty {
  %dms_replication_instances.Properties.PubliclyAccessible exists
  %dms_replication_instances.Properties.PubliclyAccessible == false
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: AWS Database Migration Service replication instances should not be public.
    Fix: Set the DMS Replication Instance property PubliclyAccessible parameter to true.
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
#
# Description:
#    Checks if the AWS Lambda function policy attached to the Lambda resource prohibits public access.
#
# Reports on:
#    AWS::Lambda::Permission
#    AWS::Lambda::LayerVersionPermission
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when no AWS Lambda permission policies are present
# b) PASS: when all AWS Lambda permission policies prohibit public access
# c) FAIL: when any AWS Lambda permission policies allow public access
# d) SKIP: hen metadata includes the suppression for rule LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED

#
# Select all AWS Lambda Permission resources from incoming template (payload)
#
let aws_lambda_permissions_public_access_prohibited = Resources.*[
  Type in [ /AWS::Lambda::Permission/,
    /AWS::Lambda::LayerVersionPermission/ ]
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
]

rule LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED when %aws_lambda_permissions_public_access_prohibited !empty {

  # Lambda permission policy where principal is an account id
  %aws_lambda_permissions_public_access_prohibited {
    Type == 'AWS::Lambda::Permission'
    Properties {
      Principal in [ /^\d{12}$/, "AWS::AccountId" ]
      OR Principal > 0
    }
  }

  # Lambda permission policy where principal is a service (not s3)
  OR %aws_lambda_permissions_public_access_prohibited {
    Type == 'AWS::Lambda::Permission'
    Properties {
      Principal != 's3.amazonaws.com'
      PrincipalOrgID !empty
      OR SourceAccount exists
      OR SourceArn !empty
      <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
        Violation: All Lambda permission policies attached to Lambda resources must prohibit public access.
        Fix: Limit permission policies by setting the Principal property to an account ID,
        or limiting a service principal by setting the SourceArn, SourceAccount, or PrincipalOrgID properties.
      >>
    }
  }

  # Lambda permission policy where principal is s3 service
  OR %aws_lambda_permissions_public_access_prohibited {
    Type == 'AWS::Lambda::Permission'
    Properties {
      Principal == 's3.amazonaws.com'
      PrincipalOrgID !empty
      OR SourceAccount exists
      <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
        Violation: All Lambda permission policies attached to Lambda resources must prohibit public access.
        Fix: Limit permission policies by setting the Principal property to an account ID,
        or for S3 as the principal specify either a SourceAccount or PrincipalOrgID.
        Note: It is possible for an S3 bucket to be deleted by its owner and recreated by another account.
      >>
    }
  }

  # Lambda layer version permission policies
  OR %aws_lambda_permissions_public_access_prohibited {
    Type == 'AWS::Lambda::LayerVersionPermission'
    Properties {
      OrganizationId !empty
      OR Principal in [ /^\d{12}$/, "AWS::AccountId" ]
      OR Principal > 0
      <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
        Violation: All Lambda permission policies attached to Lambda resources must prohibit public access.
        Fix: For Lambda layer version permission policies, either limit permissions by the OrganizationId property
        or set the Principal property to an account ID rather than using a wildcard (*).
      >>
    }
  }
}

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    RDS_INSTANCE_PUBLIC_ACCESS_CHECK
#
# Description:
#    Checks if an RDS instances has Publicly Accessible not set.
#
# Reports on:
#    AWS::RDS::DBInstance
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no RDS instances present
# b) PASS: when all RDS instances have PubliclyAccessible set to true
# c) FAIL: when all RDS instances have PubliclyAccessible set to false
# d) FAIL: when there are RDS instances with PubliclyAccessible property is not present
# e) SKIP: when metadata includes the suppression for rule RDS_INSTANCE_PUBLIC_ACCESS_CHECK

#
# Select all RDS instance resources from incoming template (payload)
#
let aws_rds_instances_not_public = Resources.*[ Type == 'AWS::RDS::DBInstance'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
]

rule RDS_INSTANCE_PUBLIC_ACCESS_CHECK when %aws_rds_instances_not_public !empty {
  # ALL RDS instances must have PubliclyAccessible set to false
  %aws_rds_instances_not_public.Properties.PubliclyAccessible == false
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: All RDS instances must not be publicly accessible.
    Fix: Set the PubliclyAccessible to false.
  >>
}

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK
#
# Description:
#   Redshift cluster should not be publicly accessible on the internet.
#
# Reports on:
#    AWS::EKS::Cluster
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there is no Redshift cluster present
# b) PASS: when Redshift Cluster resources do not have the publiclyAccessible property set (default false)
# c) PASS: when Redshift Cluster resources have the PubliclyAccessible property set to false
# d) FAIL: when any Redshift Cluster resources have the PubliclyAccessible property set to true
# e) SKIP: when metada includes the suppression for rule REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK

#
# Select all Redshift cluster resources from incoming template
#

let aws_redshift_clusters_resources_public_access_check = Resources.*[ Type == 'AWS::Redshift::Cluster'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
]


rule REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK when %aws_redshift_clusters_resources_public_access_check !empty {
    %aws_redshift_clusters_resources_public_access_check.Properties.PubliclyAccessible  not exists or
    %aws_redshift_clusters_resources_public_access_check.Properties.PubliclyAccessible == false

  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: Redshift cluster should not be available to public.
    Fix: Set the Redshift property PubliclyAccessible parameter to false.
  >>
}

## Config Rule Name : sagemaker-notebook-no-direct-internet-access
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/sagemaker-notebook-no-direct-internet-access.html"

## Config Rule Name : acm-certificate-expiration-check
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/acm-certificate-expiration-check.html"

## Config Rule Name : alb-http-drop-invalid-header-enabled
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/alb-http-drop-invalid-header-enabled.html"

## Config Rule Name : alb-http-to-https-redirection-check
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/alb-http-to-https-redirection-check.html"

# Rule Intent: Checks if HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers.

# Expectations:
# a) SKIP: when there are no ALB resources present
# b) PASS: when one or more HTTP listeners have forwarding to an HTTPS listener
# c) FAIL: when one of more HTTP listeners have forwarding to an HTTP listener instead of redirection.
# d) FAIL: when one or more HTTP listeners of Application Load Balancer do not have HTTP to HTTPS redirection configured.



#
# Select all ALB resources from incoming template (payload)
#

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    API_GW_CACHE_ENABLED_AND_ENCRYPTED
#
# Description:
#    Checks that all methods in Amazon API Gateway stages have cache enabled and cache encrypted.
#
# Reports on:
#    AWS::ApiGateway::Stage
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no API GW Stage Methods present
# b) PASS: when all API Stage Method has caching enabled and encrypted
# c) FAIL: when API Stage Method does not have caching enabled and encrypted
# d) SKIP: when metadata includes the suppression for rule API_GW_CACHE_ENABLED_AND_ENCRYPTED

let api_gw_cache_enabled_encrypted = Resources.*[ Type == 'AWS::ApiGateway::Stage'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "API_GW_CACHE_ENABLED_AND_ENCRYPTED"
]

rule API_GW_CACHE_ENABLED_AND_ENCRYPTED when %api_gw_cache_enabled_encrypted !empty {
  when %api_gw_cache_enabled_encrypted.Properties.MethodSettings exists {
    %api_gw_cache_enabled_encrypted.Properties.MethodSettings.*.CacheDataEncrypted == true
    %api_gw_cache_enabled_encrypted.Properties.MethodSettings.*.CachingEnabled == true
    <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
      Violation: API Gateway Stage Method not set with caching and caching encrypted
      Fix: API GW Stage Method property CacheDataEncrypted and CachingEnabled set to true
    >>
  }
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    CLOUD_TRAIL_ENCRYPTION_ENABLED
#
# Description:
#   Checks if AWS CloudTrail is configured to use the server side encryption (SSE)
#   AWS Key Management Service KMS key encryption.
#
# Reports on:
#    AWS::CloudTrail::Trail
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no CloudTrail Trails present
# b) PASS: when all CloudTrail Trails have KMSKeyId parameter set
# c) FAIL: when there are CloudTrail Trails with KMSKeyId property not present
# d) SKIP: when metada has rule suppression for CLOUD_TRAIL_ENCRYPTION_ENABLED

#
# Select all CloudTrail Trail resources from incoming template (payload)
#
let cloudtrail_trails_encryption = Resources.*[ Type == 'AWS::CloudTrail::Trail'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "CLOUD_TRAIL_ENCRYPTION_ENABLED"
]

rule CLOUD_TRAIL_ENCRYPTION_ENABLED when %cloudtrail_trails_encryption !empty {
  %cloudtrail_trails_encryption.Properties.KMSKeyId EXISTS
  %cloudtrail_trails_encryption.Properties.KMSKeyId is_string
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: CloudTrail Trail should be used to encrypt logs delivered by CloudTrail.
    Fix: Set the KMSKeyId parameter to enable encryption. The value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    CLOUDWATCH_LOG_GROUP_ENCRYPTED
#
# Description:
#   Checks if a log group in Amazon CloudWatch Logs is encrypted with a
#   AWS Key Management Service (KMS) managed Customer Master Keys (CMK).
#
# Reports on:
#    AWS::Logs::LogGroup
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no cloudwatch logs log group resources present
# b) PASS: when all cloudwatch logs log group resources property KmsKeyId is set
# c) FAIL: when all cloudwatch logs log group resources property KmsKeyId is not set with valid value
# d) SKIP: when metada has rule suppression for CLOUDWATCH_LOG_GROUP_ENCRYPTED

#
# Select all cloudwatch logs log group resources from incoming template (payload)
#
let cloudwatch_logs = Resources.*[ Type == 'AWS::Logs::LogGroup'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "CLOUDWATCH_LOG_GROUP_ENCRYPTED"
]

rule CLOUDWATCH_LOG_GROUP_ENCRYPTED when %cloudwatch_logs !empty {
  %cloudwatch_logs.Properties.KmsKeyId exists
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: CloudWatch Log LogsGroup does not have KmsKeyId set.
    Fix: Set the KmsKeyId parameter to a ARN.
  >>
}

## Config Rule Name : cmk-backing-key-rotation-enabled
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/cmk-backing-key-rotation-enabled.html"

## Config Rule Name : dynamodb-table-encrypted-kms
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/dynamodb-table-encrypted-kms.html"

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    EC2_EBS_ENCRYPTION_BY_DEFAULT
#
# Description:
#    Check that Amazon Elastic Block Store (EBS) encryption is enabled by default
# Reports on:
#    AWS::EC2::Volume
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when no EC2 Volume resources are present
# b) PASS: when all EC2 Volume resources have the Encrypted property set to true
# c) FAIL: when any EC2 Volumes resources do not have the Encrypted property set to true
# e) SKIP: when metadata includes the suppression for rule EC2_EBS_ENCRYPTION_BY_DEFAULT

#
# Select all EC2 Volume resources from incoming template (payload)
#
let ec2_ebs_volumes_encrypted_by_default = Resources.*[ Type == 'AWS::EC2::Volume' 
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "EC2_EBS_ENCRYPTION_BY_DEFAULT"
]

rule EC2_EBS_ENCRYPTION_BY_DEFAULT when %ec2_ebs_volumes_encrypted_by_default !empty {
    %ec2_ebs_volumes_encrypted_by_default.Properties.Encrypted == true 
		<<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
			Violation: All EBS Volumes should be encryped 
			Fix: Set Encrypted property to true
		>>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    EFS_ENCRYPTED_CHECK
#
# Description:
#   Checks if Amazon Elastic File System (Amazon EFS) is configured to encrypt the file data
#   using AWS Key Management Service (AWS KMS). The rule is NON_COMPLIANT if the encrypted
#   key is set to false on DescribeFileSystems or if the KmsKeyId key on DescribeFileSystems
#   does not match the KmsKeyId parameter.
#
# Reports on:
#    AWS::EFS::FileSystem
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no EFS resource present
# b) PASS: when all EFS resources have encrypted key property set to true
# c) FAIL: when all EFS resources have encrypted key property not set or set to false
# d) SKIP: when guard metadata states EFS_ENCRYPTED_CHECK to be suppressed

#
# Select all EFS resources from incoming template (payload)
#
let efs_file_systems_encrypted_check = Resources.*[ Type == 'AWS::EFS::FileSystem'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "EFS_ENCRYPTED_CHECK"
]

rule EFS_ENCRYPTED_CHECK when %efs_file_systems_encrypted_check !empty {
  %efs_file_systems_encrypted_check.Properties.Encrypted == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: EFS filesystem must be encrypted.
    Fix: Set the EFS Filesystem property Encrypted parameter to true.
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    ELASTICSEARCH_ENCRYPTED_AT_REST
#
# Description:
#   Elasticsearch domains must enforce server side encryption
#
# Reports on:
#    AWS::Elasticsearch::Domain
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there is no elasticsearch domain present
# b) FAIL: when elasticsearch domain has server side encryption set to false
# c) PASS: when elasticsearch domain has server side encryption set to true
# d) FAIL: when elasticsearch domain has server side encryption property is missing
# e) SKIP: when metada has rule suppression for ELASTICSEARCH_ENCRYPTED_AT_REST

#
# Select all elasticsearch domains from incoming template
#
let elasticsearch_domains_encrypted = Resources.*[ Type == 'AWS::Elasticsearch::Domain'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "ELASTICSEARCH_ENCRYPTED_AT_REST"
]

rule ELASTICSEARCH_ENCRYPTED_AT_REST when %elasticsearch_domains_encrypted !empty {
  %elasticsearch_domains_encrypted.Properties.EncryptionAtRestOptions.Enabled == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: Elasticsearch domains must enforce server side encryption.
    Fix: Set the EncryptionAtRestOptions.Enabled parameter to true.
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK
#
# Description:
#   Elasticsearch domains must enforce Node-to-Node Encryption
#
# Reports on:
#    AWS::Elasticsearch::Domain
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there is no elasticsearch domain present
# b) FAIL: when elasticsearch domain has Node-to-Node encryption set to false
# c) PASS: when elasticsearch domain has Node-to-Node encryption set to true
# d) FAIL: when elasticsearch domain has Node-to-Node encryption property missing
# e) SKIP: when metada has rule suppression for ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK

#
# Select all elasticsearch domains from incoming template
#

let elasticsearch_domains_node2node_encrpytion = Resources.*[ Type == 'AWS::Elasticsearch::Domain'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK"
]

rule ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK when %elasticsearch_domains_node2node_encrpytion !empty {
  %elasticsearch_domains_node2node_encrpytion.Properties.NodeToNodeEncryptionOptions.Enabled == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: Elasticsearch domains must enforce Node-to-Node Encryption.
    Fix: Set the NodeToNodeEncryptionOptions.Enabled parameter to true.
  >>
}

## Config Rule Name : elb-acm-certificate-required
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/elb-acm-certificate-required.html"

## Config Rule Name : elb-tls-https-listeners-only
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/elb-tls-https-listeners-only.html"

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    ENCRYPTED_VOLUMES
#
# Description:
#    Checks if the EBS volumes that are in an attached state are encrypted. 
#
# Reports on:
#    AWS::EC2::Volume
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no EBS volume resources present
# b) PASS: when all EBS volumes have the KmsKeyId property set or the Encrypted property set to true 
# c) FAIL: when any EC2 volumes do not have the KmsKeyId or Encrypted property set
# e) SKIP: hen metadata includes the suppression for rule ENCRYPTED_VOLUMES

#
# Select all EC2 Instance resources from incoming template (payload)
#
let ebs_volumes_encrypted = Resources.*[ Type == 'AWS::EC2::Volume' 
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "ENCRYPTED_VOLUMES"
]

rule ENCRYPTED_VOLUMES when %ebs_volumes_encrypted !empty {
  %ebs_volumes_encrypted.Properties.KmsKeyId !empty
	OR %ebs_volumes_encrypted.Properties.Encrypted == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: EBS volumes in an attached state must encrypted.
    Fix: either set the KmsKeyId property to a key ID, key alias, key ARN, or alias ARN 
		or set the Encrypted property to true to encrypt the volume with the account default key or AWS managed key. 
  >>
}
## Config Rule Name : kms-cmk-not-scheduled-for-deletion
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/kms-cmk-not-scheduled-for-deletion.html"

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    RDS_SNAPSHOT_ENCRYPTED
#
# Description:
#    Checks whether Amazon Relational Database Service (Amazon RDS) DB snapshots are encrypted.
#
#
# Reports on:
#    AWS::RDS::DBInstance
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no RDS instances present
# b) PASS: when all RDS instances have StorageEncrypted set to true
# c) FAIL: when all RDS instances have StorageEncrypted set to false
# d) FAIL: when there are RDS instances with StorageEncrypted property is not present
# e) SKIP: when metadata includes the suppression for rule RDS_SNAPSHOT_ENCRYPTED

#
# Select all RDS instance resources from incoming template (payload)
#
let aws_rds_instances_snapshot_encrypted = Resources.*[ Type == 'AWS::RDS::DBInstance'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "RDS_SNAPSHOT_ENCRYPTED"
]


rule RDS_SNAPSHOT_ENCRYPTED when %aws_rds_instances_snapshot_encrypted !empty {
  %aws_rds_instances_snapshot_encrypted.Properties.StorageEncrypted EXISTS
  %aws_rds_instances_snapshot_encrypted.Properties.StorageEncrypted == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: All RDS instances must have snapshots encrypted.
    Fix: Set the StorageEncrypted parameter to true so by default all snapshots are encrypted.
  >>
}

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    RDS_STORAGE_ENCRYPTED
#
# Description:
#    Checks whether storage encryption is enabled for your RDS DB instances.
#
#
# Reports on:
#    AWS::RDS::DBInstance
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no RDS instances present
# b) PASS: when all RDS instances have StorageEncrypted set to true
# c) FAIL: when all RDS instances have StorageEncrypted set to false
# d) FAIL: when there are RDS instances with StorageEncrypted property is not present
# e) SKIP: when metadata includes the suppression for rule RDS_STORAGE_ENCRYPTED

#
# Select all RDS instance resources from incoming template (payload)
#
let aws_rds_instances_storage_encrypted = Resources.*[ Type == 'AWS::RDS::DBInstance'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "RDS_STORAGE_ENCRYPTED"
]


rule RDS_STORAGE_ENCRYPTED when %aws_rds_instances_storage_encrypted !empty {
  %aws_rds_instances_storage_encrypted.Properties.StorageEncrypted EXISTS
  %aws_rds_instances_storage_encrypted.Properties.StorageEncrypted == true
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: All RDS instances must have encrypted storage.
    Fix: Set the StorageEncrypted parameter to true.
  >>
}

####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    REDSHIFT_CLUSTER_CONFIGURATION_CHECK
#
# Description:
#    Checks whether Amazon Redshift clusters have the specified settings (Encrypted Only)  
#
# Reports on:
#   AWS::Redshift::Cluster
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no Redshift Cluster resource present
# b) PASS: when Redshift Cluster resources have the Encrypted property set to true
# c) FAIL: when any Redshift Cluster resources do not have Encrypted property set (default false)
# d) FAIL: when any Redshift Cluster resources have Encrypted property set to false 
# e) SKIP: when metadata includes the suppression for rule REDSHIFT_CLUSTER_CONFIGURATION_CHECK

#
# Select all Redshift Cluster resources from incoming template (payload)
#
let redhshift_clusters_configuration_check = Resources.*[ Type == 'AWS::Redshift::Cluster' 
	Metadata.guard.SuppressedRules not exists or
    Metadata.guard.SuppressedRules.* != "REDSHIFT_CLUSTER_CONFIGURATION_CHECK"
]

rule REDSHIFT_CLUSTER_CONFIGURATION_CHECK when %redhshift_clusters_configuration_check !empty {
    %redhshift_clusters_configuration_check.Properties.Encrypted == true

    <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
			Violation: Amazon Redshift configuration should have encryption enabled
			Fix: Set the Encrypted property to true 
    >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
#
# Description:
#   Checks if your Amazon S3 bucket either has the Amazon S3 default encryption enabled or that the Amazon S3 bucket policy
#   explicitly denies put-object requests without server side encryption that uses AES-256 or AWS Key Management Service.
#
# Reports on:
#    AWS::S3::Bucket
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no S3 resource present
# b) PASS: when all S3 resources Bucket Encryption ServerSideEncryptionByDefault is set to either "aws:kms" or "AES256"
# c) FAIL: when all S3 resources have Bucket Encryption ServerSideEncryptionByDefault is not set or does not have "aws:kms" or "AES256" configurations
# d) SKIP: when metadata includes the suppression for rule S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED

#
# Select all S3 resources from incoming template (payload)
#

let s3_buckets_server_side_encryption = Resources.*[ Type == 'AWS::S3::Bucket'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
]

rule S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED when %s3_buckets_server_side_encryption !empty {
  %s3_buckets_server_side_encryption.Properties.BucketEncryption exists
  %s3_buckets_server_side_encryption.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm in ["aws:kms","AES256"]
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: S3 Bucket must enable server-side encryption.
    Fix: Set the S3 Bucket property BucketEncryption.ServerSideEncryptionConfiguration.ServerSideEncryptionByDefault.SSEAlgorithm to either "aws:kms" or "AES256"
  >>
}

#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    S3_BUCKET_SSL_REQUESTS_ONLY
#
# Description:
#   Checks if Amazon S3 buckets have policies that require requests to use Secure Socket Layer (SSL).
#
# Reports on:
#    AWS::S3::BucketPolicy
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no S3 Bucket Policy Document resource present
# b) PASS: when all S3 Bucket Policy Document set to deny if condition SecureTransport not true
# c) FAIL: when all S3 Bucket Policy Document does not have deny on insecure transport actions
# d) SKIP: when metadata includes the suppression for rule S3_BUCKET_SSL_REQUESTS_ONLY

#
# Select all S3 resources from incoming template (payload)
#
let s3_buckets_policies_ssl_requests_only = Resources.*[ Type == 'AWS::S3::BucketPolicy'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "S3_BUCKET_SSL_REQUESTS_ONLY"
]

rule S3_BUCKET_SSL_REQUESTS_ONLY when %s3_buckets_policies_ssl_requests_only !empty {
  some %s3_buckets_policies_ssl_requests_only.Properties.PolicyDocument.Statement.* == {"Action":"s3:*","Effect":"Deny","Principal":"*","Resource":"*","Condition":{"Bool":{"aws:SecureTransport":false}}}
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: Bucket policies must feature a statement to enforce TLS usage.
    Fix: Set a bucket policy statement to '"Action":"s3:*","Effect":"Deny","Principal":"*","Resource":"*","Condition":{"Bool":{"aws:SecureTransport":false}}' .
  >>
}
#
#####################################
##           Gherkin               ##
#####################################
# Rule Identifier:
#    S3_DEFAULT_ENCRYPTION_KMS
#
# Description:
#   Checks whether the Amazon S3 buckets are encrypted with AWS Key Management Service(AWS KMS).
#   The rule is NON_COMPLIANT if the Amazon S3 bucket is not encrypted with AWS KMS key.
#
# Reports on:
#    AWS::S3::Bucket
#
# Evaluates:
#    AWS CloudFormation
#
# Rule Parameters:
#    NA
#
# Scenarios:
# a) SKIP: when there are no S3 resource present
# b) PASS: when all S3 resources have ServerSideEncryptionConfiguration property set with values of "aws:kms" or "AES256"
# c) FAIL: when all S3 resources have ServerSideEncryptionConfiguration property not set or values are not "aws:kms" or "AES256"
# d) SKIP: when metadata includes the suppression for rule S3_DEFAULT_ENCRYPTION_KMS

#
# Assignments
#
let s3_buckets_s3_default_encryption = Resources.*[ Type == 'AWS::S3::Bucket'
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "S3_DEFAULT_ENCRYPTION_KMS"
]

rule S3_DEFAULT_ENCRYPTION_KMS when %s3_buckets_s3_default_encryption !empty {
  %s3_buckets_s3_default_encryption.Properties.BucketEncryption exists
  %s3_buckets_s3_default_encryption.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm in ["aws:kms","AES256"]
  <<
    Guard Rule Set: nerc
    Controls: CIP-011-3-R1-Part 1.2    
    Violation: S3 Bucket default encryption must be set.
    Fix: Set the S3 Bucket property BucketEncryption.ServerSideEncryptionConfiguration.ServerSideEncryptionByDefault.SSEAlgorithm to either "aws:kms" or "AES256"
  >>
}

## Config Rule Name : sagemaker-endpoint-configuration-kms-key-configured
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/sagemaker-endpoint-configuration-kms-key-configured.html"

## Config Rule Name : sagemaker-notebook-instance-kms-key-configured
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/sagemaker-notebook-instance-kms-key-configured.html"

## Config Rule Name : sns-encrypted-kms
## Config Rule URL: https://docs.aws.amazon.com/config/latest/developerguide/sns-encrypted-kms.html"

